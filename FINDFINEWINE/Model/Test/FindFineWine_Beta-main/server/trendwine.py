# -*- coding: utf-8 -*-
"""trendwine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19ljU1D4x0_l0HOZ3cEN6B4eRdVKogl23
"""

import json
import sys
# from turtle import title  # This import is not needed
import pandas as pd
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor

wine_data = pd.read_csv('./FINDFINEWINE2.csv', encoding='ISO-8859-1')
popular_wine_data = pd.read_csv('./PopularWine2.csv', encoding='ISO-8859-1')

wine_data.columns = wine_data.columns.str.replace('ï»¿', '')
popular_wine_data.columns = popular_wine_data.columns.str.replace('ï»¿', '')

wine_data = wine_data[['Title', 'Wine Type', 'Grape Variety', 'Gender', 'Occasion', 'Description', 'price', 'Country', 'ABV', 'IMG URL']]
popular_wine_data = popular_wine_data[['Title', 'Sales Volume']]

# Merge datasets on 'Title' 
df = pd.merge(wine_data, popular_wine_data, on='Title', how='inner')

df['ABV'] = df['ABV'].str.rstrip('%').astype(float)

df.dropna(inplace=True)

le_wine_type = LabelEncoder()
le_grape_variety = LabelEncoder()
le_gender = LabelEncoder()
le_occasion = LabelEncoder()
le_title = LabelEncoder()

df['Wine Type'] = le_wine_type.fit_transform(df['Wine Type'])
df['Grape Variety'] = le_grape_variety.fit_transform(df['Grape Variety'])
df['Gender'] = le_gender.fit_transform(df['Gender'])
df['Occasion'] = le_occasion.fit_transform(df['Occasion'])
df['Title'] = le_title.fit_transform(df['Title'])

# Features and target variable
X = df[['Wine Type', 'Grape Variety', 'Gender', 'Occasion', 'price', 'ABV']]
y = df['Sales Volume']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Function to recommend wine
def recommend_wine(wine_type, grape_variety, gender, occasion):
    # Convert input to numeric
    wine_type_num = le_wine_type.transform([wine_type])[0]
    grape_variety_num = le_grape_variety.transform([grape_variety])[0]
    gender_num = le_gender.transform([gender])[0]
    occasion_num = le_occasion.transform([occasion])[0]

    # Prepare the input data
    input_data = pd.DataFrame([[wine_type_num, grape_variety_num, gender_num, occasion_num]],
                              columns=['Wine Type', 'Grape Variety', 'Gender', 'Occasion'])

    # Fit NearestNeighbors model
    X_knn = df[['Wine Type', 'Grape Variety', 'Gender', 'Occasion']]
    nn = NearestNeighbors(n_neighbors=4)
    nn.fit(X_knn)

    distances, indices = nn.kneighbors(input_data)

    recommended_wines_indices = indices[0]

    recommended_wines = df.loc[recommended_wines_indices]

    # Filter recommended wines to match user criteria
    recommended_wines = recommended_wines[
        (recommended_wines['Wine Type'] == wine_type_num) &
        (recommended_wines['Grape Variety'] == grape_variety_num) &
        (recommended_wines['Gender'] == gender_num) &
        (recommended_wines['Occasion'] == occasion_num)
    ]

    if recommended_wines.empty:
        return None, None, None

    # Predict trending scores for the recommended wines
    recommended_wines_X = recommended_wines[['Wine Type', 'Grape Variety', 'Gender', 'Occasion', 'price', 'ABV']]
    trending_scores = model.predict(recommended_wines_X)
    recommended_wines['Trending Score'] = trending_scores

    most_trending_wine_index = recommended_wines['Trending Score'].idxmax()
    most_trending_wine = recommended_wines.loc[most_trending_wine_index]

    recommended_wines['Wine Type'] = le_wine_type.inverse_transform(recommended_wines['Wine Type'])
    recommended_wines['Grape Variety'] = le_grape_variety.inverse_transform(recommended_wines['Grape Variety'])
    recommended_wines['Gender'] = le_gender.inverse_transform(recommended_wines['Gender'])
    recommended_wines['Occasion'] = le_occasion.inverse_transform(recommended_wines['Occasion'])
    recommended_wines['Title'] = le_title.inverse_transform(recommended_wines['Title'])

    most_trending_wine_title = le_title.inverse_transform([most_trending_wine['Title']])[0]

    # Select only the required columns for the final output
    recommended_wines = recommended_wines[['Title', 'Description', 'price', 'Country', 'IMG URL', 'Grape Variety', 'Wine Type', 'Gender', 'Occasion', 'Trending Score']]

    return recommended_wines, most_trending_wine_title, most_trending_wine['IMG URL']

recommended_wines, most_trending_title, most_trending_image = recommend_wine('Red Wine', 'Tempranillo', 'Male', 'Casual Gatherings')

import pickle

# Save the trained model to a file
with open('wine_recommender.pkl', 'wb') as file:
    pickle.dump(model, file)

if __name__ == "__main__":
    wine_type = sys.argv[1]
    grape_variety = sys.argv[2]
    gender = sys.argv[3]
    occasion = sys.argv[4]

    recommended_wines, most_trending_title, most_trending_image = recommend_wine(wine_type, grape_variety,gender, occasion)

    if recommended_wines is None:
        json_string = json.dumps({"recommended_wines": [{"Title": "none"}]}, indent=4)  
        print(json_string)
    else:    
        response = {
            "recommended_wines": recommended_wines.to_dict(orient='records'),
            "trending_wine": [
                {"Title": most_trending_title,
                "image_url": most_trending_image
                }
            ]
        }

        json_string = json.dumps(response, indent=4)  
        print(json_string)